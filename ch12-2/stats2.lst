     1                                  ; Chapter 12, exercise 2
     2                                  ; Implement the stats2 function that does the following:
     3                                  ;   * Finds the median of a list of numbers
     4                                  ;   * Finds the min and max of a list of numbers
     5                                  ;   * Finds the sum of a list of numbers
     6                                  ;   * Finds the average of a list of numbers
     7                                  
     8                                  default rel
     9                                  
    10                                  ; HLL call:
    11                                  ;   stats2(arr, len, min, med, max, sum, ave);
    12                                  ; -----
    13                                  ; Arguments:
    14                                  ;   arr, address        – rdi
    15                                  ;   len, dword value    – esi
    16                                  ;   min, address        - rdx
    17                                  ;   med, address        - rcx
    18                                  ;   max, address        - r8
    19                                  ;   sum, address        - r9
    20                                  ;   ave, address        - rbp + 16
    21                                  
    22                                  section     .text
    23                                  global stats2
    24                                  stats2:
    25                                  
    26 00000000 53                          push    rbx
    27 00000001 4154                        push    r12
    28 00000003 4155                        push    r13
    29                                  
    30 00000005 BB02000000                  mov     rbx, 2
    31                                  
    32 0000000A 41BA00000000                mov     r10, 0
    33 00000010 4989D3                      mov     r11, rdx                ; Save addr of rdx
    34 00000013 89F0                        mov     eax, esi
    35 00000015 BA00000000                  mov     rdx, 0
    36 0000001A F7F3                        div     ebx
    37 0000001C 89C3                        mov     ebx, eax                ; ebx contains the index of the median
    38 0000001E B800000000                  mov     eax, 0                  ; Now eax will store the sum
    39                                  
    40                                  iter:
    41                                  
    42 00000023 468B2497                    mov     r12d, [rdi + r10*4]
    43 00000027 4154                        push    r12                     ; push since r12 could be modified in setMed
    44 00000029 4401E0                      add     eax, r12d
    45 0000002C 4939DA                      cmp     r10, rbx
    46 0000002F 7411                        je      setMed
    47                                  
    48                                  checkMin:
    49                                  
    50 00000031 415C                        pop     r12
    51 00000033 453923                      cmp     [r11], r12d
    52 00000036 7F36                        jg      setMin
    53                                  
    54                                  endIter:
    55 00000038 49FFC2                      inc     r10
    56 0000003B 4939F2                      cmp     r10, rsi
    57 0000003E 75E3                        jne     iter
    58 00000040 EB31                        jmp     exit
    59                                  
    60                                  setMed:
    61                                  
    62 00000042 4883FA01                    cmp     rdx, 1                  ; If remainder is 1, then the med is the middle number
    63 00000046 7402                        je      setMedOdd
    64 00000048 EB05                        jmp     setMedEven
    65                                  
    66                                  setMedOdd:
    67                                  
    68 0000004A 448921                      mov     [rcx], r12d
    69 0000004D EBE2                        jmp     checkMin
    70                                  
    71                                  setMedEven:
    72                                  
    73 0000004F 50                          push    rax
    74 00000050 49FFCA                      dec     r10
    75 00000053 468B2C97                    mov     r13d, [rdi + r10*4]
    76 00000057 49FFC2                      inc     r10
    77 0000005A 4501EC                      add     r12d, r13d
    78 0000005D 99                          cdq
    79 0000005E 4489E0                      mov     eax, r12d
    80 00000061 BB02000000                  mov     rbx, 2
    81 00000066 48F7F3                      div     rbx
    82 00000069 8901                        mov     [rcx], eax
    83 0000006B 58                          pop     rax
    84 0000006C EBC3                        jmp     checkMin
    85                                  
    86                                  setMin:
    87                                  
    88 0000006E 4D8923                      mov     [r11], r12
    89 00000071 EBC5                        jmp     endIter
    90                                  
    91                                  exit:
    92                                  
    93 00000073 418901                      mov     [r9], eax
    94                                  
    95 00000076 415D                        pop     r13
    96 00000078 415C                        pop     r12
    97 0000007A 5B                          pop     rbx
    98 0000007B C3                          ret
