     1                                  ; Chapter 12, exercise 2
     2                                  ; Implement the stats2 function that does the following:
     3                                  ;   * Finds the median of a list of numbers
     4                                  ;   * Finds the min and max of a list of numbers
     5                                  ;   * Finds the sum of a list of numbers
     6                                  ;   * Finds the average of a list of numbers
     7                                  
     8                                  default rel
     9                                  
    10                                  ; HLL call:
    11                                  ;   stats2(arr, len, min, med, max, sum, ave);
    12                                  ; -----
    13                                  ; Arguments:
    14                                  ;   arr, address        – rdi
    15                                  ;   len, dword value    – esi
    16                                  ;   min, address        - rdx
    17                                  ;   med, address        - rcx
    18                                  ;   max, address        - r8
    19                                  ;   sum, address        - r9
    20                                  ;   ave, address        - rbp + 16
    21                                  
    22                                  section     .text
    23                                  global stats2
    24                                  stats2:
    25                                  
    26 00000000 55                          push    rbp
    27 00000001 4889E5                      mov     rbp, rsp
    28                                  
    29 00000004 53                          push    rbx
    30 00000005 4154                        push    r12
    31 00000007 4155                        push    r13
    32                                  
    33 00000009 BB02000000                  mov     rbx, 2
    34                                  
    35 0000000E 41BA00000000                mov     r10, 0
    36 00000014 4989D3                      mov     r11, rdx                ; Save addr of rdx
    37 00000017 89F0                        mov     eax, esi
    38 00000019 BA00000000                  mov     rdx, 0
    39 0000001E F7F3                        div     ebx
    40 00000020 89C3                        mov     ebx, eax                ; ebx contains the index of the median
    41 00000022 B800000000                  mov     eax, 0                  ; Now eax will store the sum
    42                                  
    43                                  iter:
    44                                  
    45 00000027 468B2497                    mov     r12d, [rdi + r10*4]
    46 0000002B 4154                        push    r12                     ; push since r12 could be modified in setMed
    47 0000002D 4401E0                      add     eax, r12d
    48 00000030 4939DA                      cmp     r10, rbx
    49 00000033 7416                        je      setMed
    50                                  
    51                                  checkMin:
    52                                  
    53 00000035 415C                        pop     r12
    54 00000037 453923                      cmp     [r11], r12d
    55 0000003A 7F3B                        jg      setMin
    56                                  
    57                                  checkMax:
    58                                  
    59 0000003C 453920                      cmp     [r8], r12d
    60 0000003F 7C3B                        jl      setMax
    61                                  
    62                                  endIter:
    63                                  
    64 00000041 49FFC2                      inc     r10
    65 00000044 4939F2                      cmp     r10, rsi
    66 00000047 75DE                        jne     iter
    67 00000049 EB36                        jmp     exit
    68                                  
    69                                  setMed:
    70                                  
    71 0000004B 4883FA01                    cmp     rdx, 1                  ; If remainder is 1, then the med is the middle number
    72 0000004F 7402                        je      setMedOdd
    73 00000051 EB05                        jmp     setMedEven
    74                                  
    75                                  setMedOdd:
    76                                  
    77 00000053 448921                      mov     [rcx], r12d
    78 00000056 EBDD                        jmp     checkMin
    79                                  
    80                                  setMedEven:
    81                                  
    82 00000058 50                          push    rax
    83 00000059 49FFCA                      dec     r10
    84 0000005C 468B2C97                    mov     r13d, [rdi + r10*4]
    85 00000060 49FFC2                      inc     r10
    86 00000063 4501EC                      add     r12d, r13d
    87 00000066 99                          cdq
    88 00000067 4489E0                      mov     eax, r12d
    89 0000006A BB02000000                  mov     rbx, 2
    90 0000006F 48F7F3                      div     rbx
    91 00000072 8901                        mov     [rcx], eax
    92 00000074 58                          pop     rax
    93 00000075 EBBE                        jmp     checkMin
    94                                  
    95                                  setMin:
    96                                  
    97 00000077 4D8923                      mov     [r11], r12
    98 0000007A EBC0                        jmp     checkMax
    99                                  
   100                                  setMax:
   101                                  
   102 0000007C 4D8920                      mov     [r8], r12
   103 0000007F EBC0                        jmp     endIter
   104                                  
   105                                  exit:
   106                                  
   107 00000081 418901                      mov     [r9], eax
   108                                  
   109 00000084 99                          cdq
   110 00000085 F7F6                        div     esi
   111 00000087 4C8B5510                    mov     r10, [rbp + 16]
   112 0000008B 418902                      mov     [r10], eax
   113                                  
   114 0000008E 415D                        pop     r13
   115 00000090 415C                        pop     r12
   116 00000092 5B                          pop     rbx
   117 00000093 5D                          pop     rbp
   118 00000094 C3                          ret
