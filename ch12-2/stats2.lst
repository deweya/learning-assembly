     1                                  ; Chapter 12, exercise 2
     2                                  ; Implement the stats2 function that does the following:
     3                                  ;   * Finds the median of a list of numbers
     4                                  ;   * Finds the min and max of a list of numbers
     5                                  ;   * Finds the sum of a list of numbers
     6                                  ;   * Finds the average of a list of numbers
     7                                  
     8                                  default rel
     9                                  
    10                                  ; HLL call:
    11                                  ;   stats2(arr, len, min, med, max, sum, ave);
    12                                  ; -----
    13                                  ; Arguments:
    14                                  ;   arr, address        – rdi
    15                                  ;   len, dword value    – esi
    16                                  ;   min, address        - rdx
    17                                  ;   med, address        - rcx
    18                                  ;   max, address        - r8
    19                                  ;   sum, address        - r9
    20                                  ;   ave, address        - rbp + 16
    21                                  
    22                                  section     .text
    23                                  global stats2
    24                                  stats2:
    25                                  
    26 00000000 53                          push    rbx
    27 00000001 4154                        push    r12
    28 00000003 4155                        push    r13
    29                                  
    30 00000005 BB02000000                  mov     rbx, 2
    31                                  
    32 0000000A 41BA00000000                mov     r10, 0
    33 00000010 4989D3                      mov     r11, rdx                ; Save addr of rdx
    34 00000013 89F0                        mov     eax, esi
    35 00000015 BA00000000                  mov     rdx, 0
    36 0000001A F7F3                        div     ebx
    37 0000001C 89C3                        mov     ebx, eax                ; ebx contains the index of the median
    38 0000001E B800000000                  mov     eax, 0                  ; Now eax will store the sum
    39                                  
    40                                  iter:
    41                                  
    42 00000023 468B2497                    mov     r12d, [rdi + r10*4]
    43 00000027 4401E0                      add     eax, r12d
    44 0000002A 4939DA                      cmp     r10, rbx
    45 0000002D 740A                        je      setMed
    46                                  
    47                                  endIter:
    48                                  
    49 0000002F 49FFC2                      inc     r10
    50 00000032 4939F2                      cmp     r10, rsi
    51 00000035 75EC                        jne     iter
    52 00000037 EB2C                        jmp     exit
    53                                  
    54                                  setMed:
    55                                  
    56 00000039 4883FA01                    cmp     rdx, 1                  ; If remainder is 1, then the med is the middle number
    57 0000003D 7402                        je      setMedOdd
    58 0000003F EB05                        jmp     setMedEven
    59                                  
    60                                  setMedOdd:
    61                                  
    62 00000041 448921                      mov     [rcx], r12d
    63 00000044 EBE9                        jmp     endIter
    64                                  
    65                                  setMedEven:
    66                                  
    67 00000046 50                          push    rax
    68 00000047 49FFCA                      dec     r10
    69 0000004A 468B2C97                    mov     r13d, [rdi + r10*4]
    70 0000004E 49FFC2                      inc     r10
    71 00000051 4501EC                      add     r12d, r13d
    72 00000054 99                          cdq
    73 00000055 4489E0                      mov     eax, r12d
    74 00000058 BB02000000                  mov     rbx, 2
    75 0000005D 48F7F3                      div     rbx
    76 00000060 8901                        mov     [rcx], eax
    77 00000062 58                          pop     rax
    78 00000063 EBCA                        jmp     endIter
    79                                  
    80                                  exit:
    81                                  
    82 00000065 418901                      mov     [r9], eax
    83                                  
    84 00000068 415D                        pop     r13
    85 0000006A 415C                        pop     r12
    86 0000006C 5B                          pop     rbx
    87 0000006D C3                          ret
