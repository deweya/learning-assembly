     1                                  ; Chapter 11, exercise 1
     2                                  ; Implement macros for finding (against a list of integers):
     3                                  ;   * average
     4                                  ;   * min
     5                                  ;   * max
     6                                  
     7                                  default rel
     8                                  
     9                                  ; *********************
    10                                  
    11                                  ; -----
    12                                  ; Calculate the average of a list of numbers
    13                                  ; %1 - destination
    14                                  ; %2 - list of words
    15                                  %macro  cAvg     2
    16                                      lea     r8, [%2]
    17                                      mov     rax, 0                      ; rax holds the sum
    18                                      mov     r9, 0
    19                                      mov     cl, [len]
    20                                  %%loopSum:
    21                                      add     ax, [r8 + r9*2]
    22                                      inc     r9
    23                                      loop    %%loopSum
    24                                  %%calcAvg:
    25                                      mov     rdx, 0                      ; make sure any weirdness won't happen when we divide
    26                                      mov     bx, [len]
    27                                      div     bx
    28                                      mov     [%1], ax
    29                                  %endmacro
    30                                  
    31                                  ; -----
    32                                  ; Find the minimum in a list of numbers
    33                                  %macro  fMin    2
    34                                      lea     r8, [%2]
    35                                      mov     cl, [len]
    36                                      mov     r9, 0
    37                                  %%loopMin:
    38                                      mov     ax, [r8 + r9*2]
    39                                      cmp     [%1], ax
    40                                      jg      %%setMin
    41                                  %%incLoop:
    42                                      inc     r9
    43                                      loop    %%loopMin
    44                                      jmp     %%done
    45                                  %%setMin:
    46                                      mov     [%1], ax
    47                                      jmp     %%incLoop
    48                                  %%done:
    49                                  %endmacro
    50                                  
    51                                  ; -----
    52                                  ; Find the maximum in a list of numbers
    53                                  %macro  fMax    2
    54                                      lea     r8, [%2]
    55                                      mov     cl, [len]
    56                                      mov     r9, 0
    57                                  %%loopMax:
    58                                      mov     ax, [r8 + r9*2]
    59                                      cmp     [%1], ax
    60                                      jl      %%setMax
    61                                  %%incLoop:
    62                                      inc     r9
    63                                      loop    %%loopMax
    64                                      jmp     %%done
    65                                  %%setMax:
    66                                      mov     [%1], ax
    67                                      jmp     %%incLoop
    68                                  %%done:
    69                                  %endmacro
    70                                  
    71                                  ; *********************
    72                                  
    73                                  section     .data
    74                                  
    75                                  SUCCESS     equ     0
    76                                  SYS_exit    equ     0x2000001
    77                                  
    78 00000000 6400EE02160000002B-     lst         dw      100, 750, 22, 0, 555
    78 00000009 02                 
    79 0000000A 05                      len         db      5
    80 0000000B 0000                    avg         dw      0
    81 0000000D FF7F                    min         dw      0x7fff
    82 0000000F 0000                    max         dw      0
    83                                  
    84                                  ; *********************
    85                                  
    86                                  section     .text
    87                                  global _start
    88                                  _start:
    89                                  
    90                                      cAvg    avg, lst
    16 00000000 4C8D05(00000000)    <1>  lea r8, [%2]
    17 00000007 B800000000          <1>  mov rax, 0
    18 0000000C 41B900000000        <1>  mov r9, 0
    19 00000012 8A0D(0A000000)      <1>  mov cl, [len]
    20                              <1> %%loopSum:
    21 00000018 6643030448          <1>  add ax, [r8 + r9*2]
    22 0000001D 49FFC1              <1>  inc r9
    23 00000020 E2F6                <1>  loop %%loopSum
    24                              <1> %%calcAvg:
    25 00000022 BA00000000          <1>  mov rdx, 0
    26 00000027 668B1D(0A000000)    <1>  mov bx, [len]
    27 0000002E 66F7F3              <1>  div bx
    28 00000031 668905(0B000000)    <1>  mov [%1], ax
    91                                      fMin    min, lst
    34 00000038 4C8D05(00000000)    <1>  lea r8, [%2]
    35 0000003F 8A0D(0A000000)      <1>  mov cl, [len]
    36 00000045 41B900000000        <1>  mov r9, 0
    37                              <1> %%loopMin:
    38 0000004B 66438B0448          <1>  mov ax, [r8 + r9*2]
    39 00000050 663905(0D000000)    <1>  cmp [%1], ax
    40 00000057 7F07                <1>  jg %%setMin
    41                              <1> %%incLoop:
    42 00000059 49FFC1              <1>  inc r9
    43 0000005C E2ED                <1>  loop %%loopMin
    44 0000005E EB09                <1>  jmp %%done
    45                              <1> %%setMin:
    46 00000060 668905(0D000000)    <1>  mov [%1], ax
    47 00000067 EBF0                <1>  jmp %%incLoop
    48                              <1> %%done:
    92                                      fMax    max, lst
    54 00000069 4C8D05(00000000)    <1>  lea r8, [%2]
    55 00000070 8A0D(0A000000)      <1>  mov cl, [len]
    56 00000076 41B900000000        <1>  mov r9, 0
    57                              <1> %%loopMax:
    58 0000007C 66438B0448          <1>  mov ax, [r8 + r9*2]
    59 00000081 663905(0F000000)    <1>  cmp [%1], ax
    60 00000088 7C07                <1>  jl %%setMax
    61                              <1> %%incLoop:
    62 0000008A 49FFC1              <1>  inc r9
    63 0000008D E2ED                <1>  loop %%loopMax
    64 0000008F EB09                <1>  jmp %%done
    65                              <1> %%setMax:
    66 00000091 668905(0F000000)    <1>  mov [%1], ax
    67 00000098 EBF0                <1>  jmp %%incLoop
    68                              <1> %%done:
    93                                  
    94                                  exit:
    95 0000009A B801000002                  mov     rax, SYS_exit
    96 0000009F BF00000000                  mov     rdi, SUCCESS
    97 000000A4 0F05                        syscall
