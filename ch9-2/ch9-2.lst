     1                                  ; Chapter 9, exercise 2
     2                                  ; Determine if a string is a palindrome
     3                                  
     4                                  default rel
     5                                  
     6                                  ; ***************************
     7                                  
     8                                  section     .data
     9                                  
    10                                  ; Constants
    11                                  SUCCESS     equ     0
    12                                  SYS_exit    equ     0x2000001
    13                                  
    14                                  ; Variables
    15 00000000 7261636563617200        string      db      "racecar", 0        ; The string that we will check if it's a palindrome
    16 00000008 01                      isPdrome    db      1
    17                                  
    18                                  ; ***************************
    19                                  
    20                                  section     .text
    21                                  global _start
    22                                  _start:
    23                                  
    24 00000000 4C8D05(00000000)            lea     r8, [string]
    25 00000007 B900000000                  mov     rcx, 0
    26                                  
    27                                  pushStart:
    28                                  
    29 0000000C 418A0408                    mov     al, [r8 + rcx]
    30 00000010 50                          push    rax                         ; Push character to stack
    31                                  
    32 00000011 4883F800                    cmp     rax, 0                      ; If we reached the null terminating char, then jump out of the loop
    33 00000015 7405                        je      resetCounter
    34                                  
    35 00000017 48FFC1                      inc     rcx
    36 0000001A EBF0                        jmp     pushStart
    37                                  
    38                                  resetCounter:
    39                                  
    40 0000001C 58                          pop     rax                         ; Pop the null terminating char, since we won't use it
    41 0000001D 4889CA                      mov     rdx, rcx                    ; rdx is the len of the string (excluding null-terminating char)
    42 00000020 B900000000                  mov     rcx, 0                      ; Reset the counter so we can read the original string front-to-back
    43                                  
    44                                  popStart:
    45                                  
    46 00000025 58                          pop     rax
    47 00000026 418A1C08                    mov     bl, byte [r8 + rcx]
    48 0000002A 38D8                        cmp     al, bl
    49 0000002C 750A                        jne     notPdrome                   ; As soon as a char doesn't match, short circuit and exit
    50                                  
    51 0000002E 48FFC1                      inc     rcx
    52 00000031 4839D1                      cmp     rcx, rdx                    ; If we reached the length of the original string, then exit
    53 00000034 7409                        je      exit
    54                                  
    55 00000036 EBED                        jmp     popStart
    56                                  
    57                                  notPdrome:
    58                                  
    59 00000038 C605(08000000)00            mov     byte [isPdrome], 0
    60                                  
    61                                  exit:
    62 0000003F B801000002                  mov     rax, SYS_exit
    63 00000044 BF00000000                  mov     rdi, SUCCESS
    64 00000049 0F05                        syscall
